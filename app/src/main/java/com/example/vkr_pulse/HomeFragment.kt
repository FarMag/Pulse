package com.example.vkr_pulse

import android.app.VoiceInteractor
import android.content.Context
import android.content.SharedPreferences
import android.media.MediaPlayer
import android.os.Bundle
import android.os.Handler
import android.view.Gravity
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.WindowInsetsAnimation
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import androidx.cardview.widget.CardView
import androidx.fragment.app.Fragment
import com.github.mikephil.charting.charts.LineChart
import com.github.mikephil.charting.components.LimitLine
import com.github.mikephil.charting.components.XAxis
import com.github.mikephil.charting.components.YAxis
import com.github.mikephil.charting.data.Entry
import com.github.mikephil.charting.data.LineData
import com.github.mikephil.charting.data.LineDataSet
import kotlin.math.roundToInt
import com.github.mikephil.charting.formatter.ValueFormatter
import okhttp3.Call
import okhttp3.Callback
import okhttp3.FormBody
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.Response
import org.json.JSONException
import org.json.JSONObject
import java.io.IOException
import java.text.ParseException
import java.text.SimpleDateFormat
import java.text.StringCharacterIterator
import java.util.*
import kotlin.math.abs

class HomeFragment : Fragment() {

    private lateinit var sharedPreferences: SharedPreferences

    private lateinit var greetingText: TextView
    private lateinit var phraseTextView: TextView
    private lateinit var levelText: TextView
    private lateinit var rankText: TextView
    private lateinit var xpLabel: TextView
    private lateinit var xpProgress: ProgressBar
    private lateinit var weightText: TextView
    private lateinit var goalWeightText: TextView
    private lateinit var progressChart: LineChart
    private lateinit var progressPercentText: TextView
    private lateinit var weightLeftText: TextView
    private lateinit var rankImageView: ImageView

    private lateinit var phrases: Array<String>
    private var currentPhraseIndex = 0
    private val handler = Handler()
    private lateinit var phraseRunnable: Runnable

    private var previousLevel: Int = -1
//    private var currentTotalXp: Int = 200
    private var currentTotalXp: Int = 0
    private var targetWeight: Double = 0.0
    private var currentWeight: Float = 0F

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?
    ): View? {
        return inflater.inflate(R.layout.fragment_home, container, false)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)


        val mainContent = view.findViewById<ScrollView>(R.id.mainContent)
        val loadingIndicator = view.findViewById<ProgressBar>(R.id.loadingIndicator)

        mainContent.visibility = View.GONE
        loadingIndicator.visibility = View.VISIBLE
//        sharedPreferences = requireActivity().getSharedPreferences("myPrefs", Context.MODE_PRIVATE)
//        val userId = sharedPreferences.getString("sub", null)
        val preferences = requireActivity().getSharedPreferences("myPrefs", AppCompatActivity.MODE_PRIVATE)
        val accessToken = preferences.getString("access_jwt", null)

//        val targetPhis = fetchUserData(accessToken.toString())
        fetchUserData(accessToken.toString())

        rankImageView = view.findViewById(R.id.rankImageView)
        greetingText = view.findViewById(R.id.greetingText)
        phraseTextView = view.findViewById(R.id.phraseTextView)
        levelText = view.findViewById(R.id.userLevel)
        rankText = view.findViewById(R.id.userRank)
        xpLabel = view.findViewById(R.id.xpLabel)
        xpProgress = view.findViewById(R.id.xpProgress)
        weightText = view.findViewById(R.id.currentWeightText)
        goalWeightText = view.findViewById(R.id.targetWeightText)
        progressChart = view.findViewById(R.id.progressChart)
        weightLeftText = view.findViewById(R.id.weightLeftText)

//        val userName = "–ò–≤–∞–Ω"
//        greetingText.text = "–ó–∞ —Ä–∞–±–æ—Ç—É, $userName üí™"

//        val (level, currentXp, maxXp, title) = getLevelInfo(currentTotalXp)
//        updateXpUI(level, currentXp, maxXp, title)

//        loadPhrases()
//        startPhraseRotation()
//        setupProgressChart()

        //–æ—Ç–º–µ—á–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏, –Ω–∞–¥–æ –±—É–¥–µ—Ç –±—Ä–∞—Ç—å –∏—Ö –±–¥
        val caloriesConsumed = 1000
        val caloriesTarget = 1800
        val percentage = (caloriesConsumed.toFloat() / caloriesTarget * 100).toInt().coerceAtMost(100)

        val caloriesText = view.findViewById<TextView>(R.id.caloriesText)
        val progressBar = view.findViewById<ProgressBar>(R.id.caloriesProgressBar)
        caloriesText.text = "$caloriesConsumed / $caloriesTarget –∫–∫–∞–ª"
        progressBar.progress = percentage

        //—à–∞–≥–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä –¥–ª—è –Ω–∏—Ö
        val stepsDone = 3400      // –ø–æ–ª—É—á–∞–π –∏–∑ –ë–î –∏–ª–∏ —á–∞—Å–æ–≤
        val stepsGoal = 7500      // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ü–µ–ª—å
        val stepsPercentage = (stepsDone.toFloat() / stepsGoal * 100).toInt().coerceAtMost(100)

        val stepsText = view.findViewById<TextView>(R.id.stepsText)
        val stepsProgressBar = view.findViewById<ProgressBar>(R.id.stepsProgressBar)

        stepsText.text = "$stepsDone / $stepsGoal —à–∞–≥–æ–≤"
        stepsProgressBar.progress = stepsPercentage


//        // –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è XP (–≤—Ä–µ–º–µ–Ω–Ω–æ, –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –∑–≤—É–∫–∞)
//        val testXpButton = view.findViewById<Button>(R.id.testXpButton)
//        testXpButton.setOnClickListener {
//            currentTotalXp += 50
//
//            val preferences = requireActivity().getSharedPreferences("myPrefs", AppCompatActivity.MODE_PRIVATE)
//            val accessToken = preferences.getString("access_jwt", null)
//            updateUserXp(accessToken.toString(), currentTotalXp)
//
//            val (level, currentXp, maxXp, title) = getLevelInfo(currentTotalXp)
//            updateXpUI(level, currentXp, maxXp, title)
//        }

        val knowledgeCard = view.findViewById<CardView>(R.id.knowledgeCard)
        knowledgeCard.setOnClickListener {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
//            changeTextOnClick(targetPhis.toString())
            changeTextOnClick()
        }


        val resetWeightLayout = view.findViewById<LinearLayout>(R.id.resetWeightLayout)

        resetWeightLayout.setOnClickListener {
            val dialogView = layoutInflater.inflate(R.layout.dialog_reset_weight_history, null)
            val dialog = android.app.AlertDialog.Builder(requireContext())
                .setView(dialogView)
                .create()

            val cancelButton = dialogView.findViewById<Button>(R.id.cancelButton)
            val confirmButton = dialogView.findViewById<Button>(R.id.confirmButton)

            cancelButton.setOnClickListener {
                dialog.dismiss()
            }

            confirmButton.setOnClickListener {
                //–∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤–µ—Å–∞
                resetWeight(accessToken.toString())
                fetchUserData(accessToken.toString())
                dialog.dismiss()
                showCustomToast("–ò—Å—Ç–æ—Ä–∏—è –≤–µ—Å–∞ –æ—á–∏—â–µ–Ω–∞")
            }

            dialog.window?.setBackgroundDrawableResource(android.R.color.transparent)
            dialog.show()
        }

    }




    private fun fetchUserData(accessToken: String) {
        val urlAddresses = listOf("auth", "progress")

        val client = OkHttpClient()

        urlAddresses.forEach { urlAddress ->
            val url = when (urlAddress) {
                "progress" -> getString(R.string.url_progress) + "userProgress"
                "auth" -> getString(R.string.url_auth) + "getUserData"
                else -> throw IllegalArgumentException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å URL: $urlAddress")
            }
//            val url = when (urlAddress) {
//                "auth" -> getString(R.string.url_auth) + "getUserData"
//                "progress" -> getString(R.string.url_progress) + "userProgress"
//                else -> throw IllegalArgumentException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å URL: $urlAddress")
//            }

            val formBody = FormBody.Builder()
                .add("access_token", accessToken)
                .build()

            val request = Request.Builder()
                .url(url)
                .post(formBody)
                .build()

            client.newCall(request).enqueue(object : Callback {
                override fun onFailure(call: Call, e: IOException) {
                    e.printStackTrace()
                    showToast("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
                }

                override fun onResponse(call: Call, response: Response) {
                    response.use {
                        handleResponse(it, urlAddress)
                    }
                }

                private fun handleResponse(response: Response, urlAddress: String) {
                    if (!response.isSuccessful) {
                        handleErrorResponse(response.code)
                        return
                    }

                    val responseData = response.body?.string()
                    if (responseData != null) {
                        try {
                            val jsonResponse = JSONObject(responseData)
                            when (urlAddress) {
                                "progress" -> parseProgressData(jsonResponse)
                                "auth" -> parseUserData(jsonResponse)
                            }
//                            when (urlAddress) {
//                                "auth" -> parseUserData(jsonResponse)
//                                "progress" -> parseProgressData(jsonResponse)
//                            }
                        } catch (e: JSONException) {
                            showToast("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
                        }
                    } else {
                        showToast("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                    }
                }

                private fun handleErrorResponse(code: Int) {
                    val errorMessage = when (code) {
                        400 -> "–û—à–∏–±–∫–∞: ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
                        404 -> "–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                        500 -> "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
                        else -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: $code"
                    }
                    showToast(errorMessage)
                }
            })
        }

    }

    private fun updateUserXp(accessToken: String, currentXp: Int) {
        val url = getString(R.string.url_auth) + "updateUserXp"

        val client = OkHttpClient()

        val formBody = FormBody.Builder()
            .add("access_token", accessToken)
            .add("current_xp", currentXp.toString())
            .build()

        val request = Request.Builder()
            .url(url)
            .post(formBody)
            .build()

        client.newCall(request).enqueue(object : Callback {
            override fun onFailure(call: Call, e: IOException) {
                e.printStackTrace()
                showToast("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            }

            override fun onResponse(call: Call, response: Response) {
                response.use {
                    handleResponse(response)
                }
            }

            private fun handleResponse(response: Response) {
                if (!response.isSuccessful) {
                    handleErrorResponse(response.code)
                    return
                }

                val responseData = response.body?.string()
                if (responseData != null) {
                    try {
                        val jsonResponse = JSONObject(responseData)
//                        parseProgressData(jsonResponse)
                    } catch (e: JSONException) {
                        showToast("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
                    }
                } else {
                    showToast("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                }
            }

            private fun handleErrorResponse(code: Int) {
                val errorMessage = when (code) {
                    400 -> "–û—à–∏–±–∫–∞: ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
                    404 -> "–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    500 -> "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
                    else -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: $code"
                }
                showToast(errorMessage)
            }
        })
    }

    private fun resetWeight(accessToken: String) {
        val url = getString(R.string.url_progress) + "resetWeight"

        val client = OkHttpClient()

        val formBody = FormBody.Builder()
            .add("access_token", accessToken)
            .build()

        val request = Request.Builder()
            .url(url)
            .post(formBody)
            .build()

        client.newCall(request).enqueue(object : Callback {
            override fun onFailure(call: Call, e: IOException) {
                e.printStackTrace()
                showToast("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            }

            override fun onResponse(call: Call, response: Response) {
                response.use {
                    handleResponse(response)
                }
            }

            private fun handleResponse(response: Response) {
                if (!response.isSuccessful) {
                    handleErrorResponse(response.code)
                    return
                }

                val responseData = response.body?.string()
                if (responseData != null) {
                    try {
                        val jsonResponse = JSONObject(responseData)
//                        parseProgressData(jsonResponse)
                    } catch (e: JSONException) {
                        showToast("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
                    }
                } else {
                    showToast("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                }
            }

            private fun handleErrorResponse(code: Int) {
                val errorMessage = when (code) {
                    400 -> "–û—à–∏–±–∫–∞: ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
                    404 -> "–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    500 -> "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
                    else -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: $code"
                }
                showToast(errorMessage)
            }
        })
    }



    private fun showToast(message: String) {
        requireActivity().runOnUiThread {
            Toast.makeText(requireContext(), message, Toast.LENGTH_SHORT).show()
        }
    }











//    private fun fetchUserData(access_token: String) {
//        val url = getString(R.string.url_auth) + "getUserData"
//
//        val client = OkHttpClient()
////        val request = VoiceInteractor.Request.Builder().url(url).build()
//
//        val formBody = FormBody.Builder()
//            .add("access_token", access_token)
//            .build()
//
//        val request = Request.Builder()
//            .url(url)
//            .post(formBody)
//            .build()
//
//        client.newCall(request).enqueue(object : Callback {
//            override fun onFailure(call: Call, e: IOException) {
//                e.printStackTrace()
//                requireActivity().runOnUiThread {
//                    Toast.makeText(requireContext(), "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", Toast.LENGTH_SHORT).show()
//                }
//            }
//
//            override fun onResponse(call: Call, response: Response) {
//                response.use {
//                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é handleResponse –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
//                    handleResponse(response)
//                }
//            }
//
//            private fun handleResponse(response: Response) {
//                if (!response.isSuccessful) {
//                    handleErrorResponse(response.code)
//                    return
//                }
//
//                val responseData = response.body?.string()
//                if (responseData != null) {
//                    try {
//                        val jsonResponse = JSONObject(responseData)
//                        parseUserData(jsonResponse)
//                    } catch (e: JSONException) {
//                        Toast.makeText(requireContext(), "–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö", Toast.LENGTH_SHORT).show()
//                    }
//                } else {
//                    Toast.makeText(requireContext(), "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞", Toast.LENGTH_SHORT).show()
//                }
//            }
//
//            private fun handleErrorResponse(code: Int) {
//                requireActivity().runOnUiThread {
//                    when (code) {
//                        400 -> Toast.makeText(requireContext(), "–û—à–∏–±–∫–∞: ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω", Toast.LENGTH_SHORT).show()
//                        404 -> Toast.makeText(requireContext(), "–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", Toast.LENGTH_SHORT).show()
//                        500 -> Toast.makeText(requireContext(), "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", Toast.LENGTH_SHORT).show()
//                        else -> Toast.makeText(requireContext(), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: $code", Toast.LENGTH_SHORT).show()
//                    }
//                }
//            }
//        })
//    }

//    private fun parseUserData(jsonData: String) {
//        val jsonObject = JSONObject(jsonData)
//        val userName = jsonObject.getString("username")
////        val level = jsonObject.getInt("level")
////        val currentXp = jsonObject.getInt("currentXp")
////        val maxXp = jsonObject.getInt("maxXp")
////        val title = jsonObject.getString("title")
//        val weight = jsonObject.getDouble("weight")
//        val targetWeight = jsonObject.getDouble("target_weight")

    private fun parseUserData(jsonData: JSONObject){
//        val jsonObject = JSONObject(jsonData)

        val userName = jsonData.getString("username")
//        val level = jsonObject.getInt("level")
//        val currentXp = jsonObject.getInt("currentXp")
//        val maxXp = jsonObject.getInt("maxXp")
//        val title = jsonObject.getString("title")
        val xp = jsonData.getString("xp")
        currentTotalXp = xp.toInt()
        val weight = jsonData.getDouble("weight")
        targetWeight = jsonData.getDouble("target_weight")
        val targetPhis = jsonData.getString("target_phis")
//        val (level, currentXp, maxXp, title) = getLevelInfo(currentTotalXp)
//        updateXpUI(level, currentXp, maxXp, title)










//        greetingText.text = "–ó–∞ —Ä–∞–±–æ—Ç—É, $userName üí™"
////            updateXpUI(level, currentXp, maxXp, title)
//        weightText.text = "–¢–µ–∫—É—â–∏–π –≤–µ—Å: ${String.format("%.0f", weight.toFloat())} –∫–≥"
////            weightText.text = weight.toString()
//        goalWeightText.text = "–¶–µ–ª—å: ${String.format("%.0f", targetWeight.toFloat())} –∫–≥"
//
////            goalWeightText.text = targetWeight.toString()
//
////            val (level, currentXp, maxXp, title) = getLevelInfo(currentXp)
//
//        val startWeight = weight.toFloat()
//        currentWeight = weight.toFloat()
//
//        val delta = (targetWeight - startWeight).toFloat()
//        val progressDelta = currentWeight - startWeight
//        val progressPercent = if (delta != 0f) (progressDelta / delta * 100).coerceIn(0f, 100f) else 0f
//        val remaining = kotlin.math.abs(currentWeight - targetWeight)
//
////            progressPercentText.text = "–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progressPercent.toInt()}%"
//        weightLeftText.text = "–û—Å—Ç–∞–ª–æ—Å—å: ${"%.0f".format(remaining)} –∫–≥"
//
//        val (level, currentXp, maxXp, title) = getLevelInfo(currentTotalXp)
//        updateXpUI(level, currentXp, maxXp, title)
//
//        startPhraseRotation(targetPhis)









//        currentWeight = weight.toFloat()

        // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        requireActivity().runOnUiThread {
            greetingText.text = "–ó–∞ —Ä–∞–±–æ—Ç—É, $userName üí™"
//            updateXpUI(level, currentXp, maxXp, title)
            weightText.text = "–¢–µ–∫—É—â–∏–π –≤–µ—Å: ${String.format("%.0f", weight.toFloat())} –∫–≥"
//            weightText.text = weight.toString()
            goalWeightText.text = "–¶–µ–ª—å: ${String.format("%.0f", targetWeight.toFloat())} –∫–≥"

//            goalWeightText.text = targetWeight.toString()

//            val (level, currentXp, maxXp, title) = getLevelInfo(currentXp)

            val startWeight = weight.toFloat()
            currentWeight = weight.toFloat()

            val delta = (targetWeight - startWeight).toFloat()
            val progressDelta = currentWeight - startWeight
            val progressPercent = if (delta != 0f) (progressDelta / delta * 100).coerceIn(0f, 100f) else 0f
            val remaining = kotlin.math.abs(currentWeight - targetWeight)

//            progressPercentText.text = "–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progressPercent.toInt()}%"
            weightLeftText.text = "–û—Å—Ç–∞–ª–æ—Å—å: ${"%.0f".format(remaining)} –∫–≥"

            val (level, currentXp, maxXp, title) = getLevelInfo(currentTotalXp)
            updateXpUI(level, currentXp, maxXp, title)

            startPhraseRotation(targetPhis)

            view?.findViewById<ScrollView>(R.id.mainContent)?.visibility = View.VISIBLE
            view?.findViewById<ProgressBar>(R.id.loadingIndicator)?.visibility = View.GONE
        }
//        return targetPhis
    }

    private fun parseProgressData(jsonData: JSONObject) {
        val firstWeight = jsonData.getJSONObject("first_data_user")
        val startWeight = firstWeight.getString("weight").toFloat()

        val weightHistory = mutableListOf<ProgressData>()
        val weightHistoryJsonArray = jsonData.getJSONArray("all_progress_logs")

        for (i in 0 until weightHistoryJsonArray.length()) {
            val progressItem = weightHistoryJsonArray.getJSONObject(i)
            val date = progressItem.getString("date")
            val weight = progressItem.getString("weight").toFloat()
            weightHistory.add(ProgressData(date, weight))
        }

        val entries = weightHistory.mapIndexed { index, entry ->
            Entry(index.toFloat(), entry.weight)
        }

        val dataSet = LineDataSet(entries, "–í–µ—Å (–∫–≥)").apply {
            color = resources.getColor(R.color.teal_700, null)
            valueTextColor = resources.getColor(R.color.black, null)
            lineWidth = 2.5f
            circleRadius = 4f
            setDrawFilled(true)
            fillAlpha = 100
            fillColor = resources.getColor(R.color.teal_200, null)
            mode = LineDataSet.Mode.CUBIC_BEZIER
            setDrawValues(false)
        }

        progressChart.data = LineData(dataSet)

        progressChart.apply {
            description.isEnabled = false
            axisRight.isEnabled = false
            setTouchEnabled(false)
            setScaleEnabled(false) // üîí –∑–∞–ø—Ä–µ—â–∞–µ–º –º–∞—Å—à—Ç–∞–±
            setExtraBottomOffset(14f) // ‚¨áÔ∏è —Ñ–∏–∫—Å –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É

            xAxis.apply {
                position = XAxis.XAxisPosition.BOTTOM
                setDrawGridLines(false)
                labelRotationAngle = -30f
                granularity = 1f
                textSize = 11f // üî§ —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–µ–∑–∞–ª–æ—Å—å
                valueFormatter = DateAxisFormatter(weightHistory.map { it.date })
            }

            axisLeft.apply {
                setDrawGridLines(true)
                setPosition(YAxis.YAxisLabelPosition.OUTSIDE_CHART)
            }

            legend.isEnabled = false
            invalidate()
        }

        requireActivity().runOnUiThread {
            val currentWeight = currentWeight
            val delta = abs(targetWeight - startWeight)
            val progressDelta = abs(currentWeight - startWeight)
            val progressPercent = if (delta != 0.0) (progressDelta / delta * 100).coerceIn(0.0, 100.0) else 0.0
//            progressPercentText.text = "–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progressPercent.toInt()}%"

            view?.findViewById<ScrollView>(R.id.mainContent)?.visibility = View.VISIBLE
            view?.findViewById<ProgressBar>(R.id.loadingIndicator)?.visibility = View.GONE
        }
    }

    data class ProgressData(val date: String, val weight: Float) // –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ


    fun showCustomToast(message: String) {
        val inflater = layoutInflater
        val layout = inflater.inflate(R.layout.layout_success_toast, null)

        val toastText = layout.findViewById<TextView>(R.id.toastText)
        toastText.text = message

        val toast = Toast(requireContext().applicationContext)
        toast.view = layout
        toast.duration = Toast.LENGTH_SHORT
        toast.setGravity(Gravity.TOP or Gravity.CENTER_HORIZONTAL, 0, 120)
        toast.show()
    }

    override fun onDestroyView() {
        super.onDestroyView()
        handler.removeCallbacks(phraseRunnable)
    }

//    private fun loadPhrases() {
//        phrases = listOf( //–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ - –Ω–∞–¥–æ –∏—Ö —É–¥–∞–ª–∏—Ç—å
//            "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞–º–µ–¥–ª—è—é—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã —Å—Ç–∞—Ä–µ–Ω–∏—è –∫–ª–µ—Ç–æ–∫.",
//            "30 –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –¥–µ–Ω—å —Å–Ω–∏–∂–∞—é—Ç —Ä–∏—Å–∫ –∏–Ω—Ñ–∞—Ä–∫—Ç–∞ –Ω–∞ 50%.",
//            "–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–æ—Å—Ç–Ω–æ–π —Ç–∫–∞–Ω–∏.",
//        )
//
//        val muscleGainPhrases = listOf( //–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã
//            "–ì–∏–ø–µ—Ä—Ç—Ä–æ—Ñ–∏—è –º—ã—à—Ü –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ 60‚Äì80% –æ—Ç 1–ü–ú –Ω–∞–≥—Ä—É–∑–∫–∏.",
//            "–î–ª—è —Ä–æ—Å—Ç–∞ –º—ã—à—Ü –≤–∞–∂–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–µ—Ä–µ–≥—Ä—É–∑ ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–π –≤–µ—Å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.",
//            "–°–æ–Ω –º–µ–Ω–µ–µ 6 —á–∞—Å–æ–≤ —Å–Ω–∏–∂–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω–∞ –∏ –∑–∞–º–µ–¥–ª—è–µ—Ç —Ä–æ—Å—Ç –º—ã—à—Ü.",
//            "–ë–µ–ª–æ–∫ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —É—Å–∫–æ—Ä—è–µ—Ç –º—ã—à–µ—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Ä–æ—Å—Ç.",
//            "–î–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã –Ω—É–∂–Ω–æ –ø–æ—Ç—Ä–µ–±–ª—è—Ç—å –±–æ–ª—å—à–µ –∫–∞–ª–æ—Ä–∏–π, —á–µ–º —Ç—Ä–∞—Ç–∏—à—å.",
//            "–ú—ã—à—Ü—ã —Ä–∞—Å—Ç—É—Ç –Ω–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ, –∞ –≤–æ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞.",
//            "–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚Äî 2‚Äì3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –Ω–∞ –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –º—ã—à—Ü.",
//            "–°–∏–ª–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç –∞–Ω–∞–±–æ–ª–∏—á–µ—Å–∫–∏–µ –≥–æ—Ä–º–æ–Ω—ã, –≤–∫–ª—é—á–∞—è IGF-1 –∏ —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω.",
//            "20‚Äì30 –≥ –±–µ–ª–∫–∞ –≤ –æ–¥–∏–Ω –ø—Ä–∏—ë–º –ø–∏—â–∏ ‚Äî –º–∞–∫—Å–∏–º—É–º, –∫–æ—Ç–æ—Ä—ã–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è.",
//            "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ –æ—Ç–∫–∞–∑–∞ —Å—Ç–∏–º—É–ª–∏—Ä—É—é—Ç –±–æ–ª—å—à–µ–µ –º—ã—à–µ—á–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ.",
//            "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–ø—Ä–∏—Å–µ–¥, –∂–∏–º, —Ç—è–≥–∞) –ª—É—á—à–µ –≤—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–∞—é—Ç —Ä–æ—Å—Ç –º—ã—à—Ü.",
//            "–ö—Ä–µ–∞—Ç–∏–Ω –º–æ–Ω–æ–≥–∏–¥—Ä–∞—Ç ‚Äî —Å–∞–º—ã–π –∏–∑—É—á–µ–Ω–Ω—ã–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –¥–æ–±–∞–≤–æ—á–Ω—ã–π —Å—Ç–∏–º—É–ª—è—Ç–æ—Ä —Å–∏–ª—ã.",
//            "–ì–æ—Ä–º–æ–Ω —Ä–æ—Å—Ç–∞ –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –≤–æ —Å–Ω–µ ‚Äî –Ω–µ –ø—Ä–µ–Ω–µ–±—Ä–µ–≥–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –æ—Ç–¥—ã—Ö–æ–º.",
//            "–û–º–µ–≥–∞-3 —É–ª—É—á—à–∞–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –∏–Ω—Å—É–ª–∏–Ω—É –∏ —É—Å–∫–æ—Ä—è–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ.",
//            "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —É–≥–ª–µ–≤–æ–¥–æ–≤ ‚Äî –ø—Ä–∏—á–∏–Ω–∞ –Ω–∏–∑–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –∏ –∑–∞–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –º—ã—à—Ü.",
//            "–†–∞—Å—Ç—É—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ ‚Äî –∫–ª—é—á –∫ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–º—É –ø—Ä–æ–≥—Ä–µ—Å—Å—É.",
//            "–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±–µ–∑ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –∫–∞—Ç–∞–±–æ–ª–∏–∑–º—É.",
//            "BCAA –ø–æ–º–æ–≥–∞—é—Ç –∑–∞—â–∏—Ç–∏—Ç—å –º—ã—à—Ü—ã –≤–æ –≤—Ä–µ–º—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫.",
//            "–¢–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω ‚Äî –≥–ª–∞–≤–Ω—ã–π –≥–æ—Ä–º–æ–Ω —Ä–æ—Å—Ç–∞ –º—ã—à—Ü, –∏ –µ–≥–æ —É—Ä–æ–≤–µ–Ω—å –º–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.",
//            "–û—Ç–∫–∞–∑ –æ—Ç –∞–ª–∫–æ–≥–æ–ª—è —É–ª—É—á—à–∞–µ—Ç —Å–∏–Ω—Ç–µ–∑ –±–µ–ª–∫–∞ –∏ –ø–æ–≤—ã—à–∞–µ—Ç —Å–∏–ª—É."
//        )
//
//        val fatLossPhrases = listOf( //–ø–æ—Ö—É–¥–µ–Ω–∏–µ
//            "–î–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π ‚Äî –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞.",
//            "–°–æ–Ω –º–µ–Ω–µ–µ 6 —á–∞—Å–æ–≤ –Ω–∞—Ä—É—à–∞–µ—Ç —Ä–µ–≥—É–ª—è—Ü–∏—é –≥–æ—Ä–º–æ–Ω–æ–≤ –≥–æ–ª–æ–¥–∞ ‚Äî –ª–µ–ø—Ç–∏–Ω–∞ –∏ –≥—Ä–µ–ª–∏–Ω–∞.",
//            "–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É –≤–æ –≤—Ä–µ–º—è –ø–æ—Ö—É–¥–µ–Ω–∏—è.",
//            "–£–≥–ª–µ–≤–æ–¥—ã –Ω–µ –≤—Ä–∞–≥–∏ ‚Äî –≥–ª–∞–≤–Ω–æ–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π.",
//            "–ö–∞—Ä–¥–∏–æ —É—Å–∏–ª–∏–≤–∞–µ—Ç —Å–∂–∏–≥–∞–Ω–∏–µ –∂–∏—Ä–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å —Å–∏–ª–æ–≤—ã–º–∏.",
//            "–í—ã—Å–æ–∫–æ–±–µ–ª–∫–æ–≤–∞—è –¥–∏–µ—Ç–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É –ø—Ä–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π.",
//            "–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∏—Å–∫ –ø–µ—Ä–µ–µ–¥–∞–Ω–∏—è.",
//            "–ü–∏—Ç—å–µ–≤–∞—è –≤–æ–¥–∞ –ø–µ—Ä–µ–¥ –ø—Ä–∏—ë–º–∞–º–∏ –ø–∏—â–∏ —Å–Ω–∏–∂–∞–µ—Ç –∞–ø–ø–µ—Ç–∏—Ç.",
//            "–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–µ—Å—Å –ø–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫–æ—Ä—Ç–∏–∑–æ–ª–∞ –∏ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—é –∂–∏—Ä–∞.",
//            "–ï–¥–∞ —Å –≤—ã—Å–æ–∫–∏–º –≥–ª–∏–∫–µ–º–∏—á–µ—Å–∫–∏–º –∏–Ω–¥–µ–∫—Å–æ–º –º–æ–∂–µ—Ç —É—Å–∏–ª–∏–≤–∞—Ç—å —á—É–≤—Å—Ç–≤–æ –≥–æ–ª–æ–¥–∞.",
//            "–î–µ—Ñ–∏—Ü–∏—Ç –∂–µ–ª–µ–∑–∞ –∏ –≤–∏—Ç–∞–º–∏–Ω–∞ D –º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª–∏—Ç—å –º–µ—Ç–∞–±–æ–ª–∏–∑–º.",
//            "–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π, –Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞—Ü–∏–æ–Ω–∞.",
//            "–ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –ø–æ–≤—ã—à–∞–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏—é –∏ —É–º–µ–Ω—å—à–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å—Ä—ã–≤–æ–≤.",
//            "–°–ª–∏—à–∫–æ–º —Ä–µ–∑–∫–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π –∑–∞–º–µ–¥–ª—è–µ—Ç –æ–±–º–µ–Ω –≤–µ—â–µ—Å—Ç–≤.",
//            "–ù–æ—á–Ω—ã–µ –ø–µ—Ä–µ–∫—É—Å—ã —Ç–æ—Ä–º–æ–∑—è—Ç –∂–∏—Ä–æ—Å–∂–∏–≥–∞–Ω–∏–µ –∏ —É—Ö—É–¥—à–∞—é—Ç —Å–æ–Ω.",
//            "–ü–æ—Ç–µ—Ä—è –≤–µ—Å–∞ –±–µ–∑ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ –º—ã—à—Ü.",
//            "–ú–∏–Ω–∏–º—É–º 7000 —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å –ø–æ–º–æ–≥–∞–µ—Ç —É—Å–∫–æ—Ä–∏—Ç—å —Å–∂–∏–≥–∞–Ω–∏–µ –∂–∏—Ä–∞.",
//            "–†–∞—Ü–∏–æ–Ω —Å –Ω–∏–∑–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å–Ω–∏–∂–∞–µ—Ç —Ç—è–≥—É –∫ –µ–¥–µ.",
//            "–†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø—Ä–∏—ë–º –ø–∏—â–∏ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –∏ —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫ –ø–µ—Ä–µ–µ–¥–∞–Ω–∏—è.",
//            "–ü–æ—Ç–µ—Ä—è 0.5‚Äì1 –∫–≥ –≤ –Ω–µ–¥–µ–ª—é ‚Äî –∑–¥–æ—Ä–æ–≤—ã–π –∏ —É—Å—Ç–æ–π—á–∏–≤—ã–π —Ç–µ–º–ø."
//        )
//
//        val maintenancePhrases = listOf( //–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã
//            "–†–µ–≥—É–ª—è—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫ –¥–∏–∞–±–µ—Ç–∞ 2 —Ç–∏–ø–∞ –Ω–∞ 30‚Äì50%.",
//            "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã ‚Äî —ç—Ç–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å, –∞ –Ω–µ –∂—ë—Å—Ç–∫–∏–µ –¥–∏–µ—Ç—ã –∏ –º–∞—Ä–∞—Ñ–æ–Ω—ã.",
//            "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ.",
//            "30 –º–∏–Ω—É—Ç —É–º–µ—Ä–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –¥–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–¥—Ü–∞ –∏ —Å–æ—Å—É–¥–æ–≤.",
//            "–°–∏–ª–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –ø–æ–º–æ–≥–∞—é—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º.",
//            "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.",
//            "–•–æ—Ä–æ—à–∞—è —Ñ–æ—Ä–º–∞ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏—Å—Ç–µ–º–Ω–æ—Å—Ç–∏, –∞ –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ—Å—Ç–∏.",
//            "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ –∏ –±–æ–¥—Ä–æ—Å—Ç—å –¥–Ω—ë–º.",
//            "–ë–∞–ª–∞–Ω—Å –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤ –≤–∞–∂–µ–Ω –¥–∞–∂–µ –ø—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–∏ –≤–µ—Å–∞.",
//            "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏ —Å–Ω–∏–∂–∞—é—Ç —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ –∏ —É–ª—É—á—à–∞—é—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.",
//            "–§–∏–∑–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞ –Ω–∞–ø—Ä—è–º—É—é –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é.",
//            "–ì–∏–±–∫–æ—Å—Ç—å –∏ –º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å —Å—É—Å—Ç–∞–≤–æ–≤ –≤–∞–∂–Ω—ã –Ω–µ –º–µ–Ω—å—à–µ —Å–∏–ª—ã –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏.",
//            "–°—Ç–∞–±–∏–ª—å–Ω—ã–π –≤–µ—Å —Å–Ω–∏–∂–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å—É—Å—Ç–∞–≤—ã –∏ –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫.",
//            "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π.",
//            "–†–∞—Ü–∏–æ–Ω —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–ª–µ—Ç—á–∞—Ç–∫–∏ —É–ª—É—á—à–∞–µ—Ç –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ –∏ —Å–Ω–∏–∂–∞–µ—Ç –∞–ø–ø–µ—Ç–∏—Ç.",
//            "–î–∞–∂–µ 15 –º–∏–Ω—É—Ç —Ä–∞—Å—Ç—è–∂–∫–∏ –≤ –¥–µ–Ω—å —É–ª—É—á—à–∞—é—Ç —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ.",
//            "–°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–æ—Ä–º—É –ø—Ä–æ—â–µ, —á–µ–º –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –µ—ë –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞.",
//            "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–∫—Ä–µ–ø–ª—è–µ—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç –∏ —É–ª—É—á—à–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –±–æ–ª–µ–∑–Ω–µ–π.",
//            "–ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ—Ä—Ü–∏–π –ø–æ–º–æ–≥–∞–µ—Ç –¥–µ—Ä–∂–∞—Ç—å –≤–µ—Å –±–µ–∑ —Å—Ç—Ä–æ–≥–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.",
//            "–†–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–µ–∂–∏–º —Å–Ω–∞ –∏ –±–æ–¥—Ä—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ–º—É –æ–±–º–µ–Ω—É –≤–µ—â–µ—Å—Ç–≤."
//        )
//
//        val longevityPhrases = listOf( //—Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –¥–æ–ª–≥–æ–ª–µ–Ω–∏–µ
//            "–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ 50 –ø–æ–º–æ–≥–∞—é—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–æ—Å—Ç–µ–π –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –æ—Å—Ç–µ–æ–ø–æ—Ä–æ–∑.",
//            "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å–Ω–∏–∂–∞—é—Ç —Ä–∏—Å–∫ –±–æ–ª–µ–∑–Ω–µ–π —Å–µ—Ä–¥—Ü–∞ –Ω–∞ 40‚Äì50%.",
//            "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–º–µ–Ω—å—à–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.",
//            "–î–∞–∂–µ –ª—ë–≥–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é —É–ª—É—á—à–∞—é—Ç –±–∞–ª–∞–Ω—Å –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é.",
//            "–ü–æ—Ç–µ—Ä—è –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ 40 –ª–µ—Ç ‚Äî –¥–≤–∏–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∏–ª—É.",
//            "–°–∏–ª–æ–≤—ã–µ –∏ –∞—ç—Ä–æ–±–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –∏ –∏–Ω—Å—É–ª–∏–Ω.",
//            "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –≤–µ—Å–æ–º –∑–∞—â–∏—â–∞—é—Ç —Å—É—Å—Ç–∞–≤—ã –∏ —Ä–∞–∑–≤–∏–≤–∞—é—Ç –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å.",
//            "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫ –ø–∞–¥–µ–Ω–∏–π –Ω–∞ 30% —É –ª—é–¥–µ–π —Å—Ç–∞—Ä—à–µ 65 –ª–µ—Ç.",
//            "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –º–∞—Å—Å—ã –º—ã—à—Ü —Å–≤—è–∑–∞–Ω–æ —Å –±–æ–ª–µ–µ –¥–æ–ª–≥–æ–π –∏ –∑–¥–æ—Ä–æ–≤–æ–π –∂–∏–∑–Ω—å—é.",
//            "–î–∞–∂–µ 20 –º–∏–Ω—É—Ç —Ö–æ–¥—å–±—ã –≤ –¥–µ–Ω—å –ø—Ä–æ–¥–ª–µ–≤–∞—é—Ç –∂–∏–∑–Ω—å –∏ —Å–Ω–∏–∂–∞—é—Ç –≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã.",
//            "–†–∞—Å—Ç—è–∂–∫–∞ –∏ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —É–ª—É—á—à–∞—é—Ç –ø–æ–¥–≤–∏–∂–Ω–æ—Å—Ç—å –∏ –Ω–∞—Å—ã—â–µ–Ω–∏–µ —Ç–∫–∞–Ω–µ–π –∫–∏—Å–ª–æ—Ä–æ–¥–æ–º.",
//            "–°–æ–Ω, –ø–∏—Ç–∞–Ω–∏–µ –∏ –¥–≤–∏–∂–µ–Ω–∏–µ ‚Äî —Ç—Ä–∏ —Å—Ç–æ–ª–ø–∞ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è.",
//            "–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å ¬´—Ö–æ—Ä–æ—à–µ–≥–æ¬ª —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω–∞ (–õ–ü–í–ü).",
//            "–°–∏–ª—å–Ω—ã–µ –º—ã—à—Ü—ã –æ–±–ª–µ–≥—á–∞—é—Ç –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—É—é –∂–∏–∑–Ω—å ‚Äî –æ—Ç –ø–æ–¥—ä—ë–º–∞ —Å –∫—Ä–µ—Å–ª–∞ –¥–æ –ø—Ä–æ–≥—É–ª–∫–∏.",
//            "–ó–¥–æ—Ä–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫ –¥–µ–º–µ–Ω—Ü–∏–∏ –Ω–∞ 30‚Äì40%.",
//            "–í–æ–∑—Ä–∞—Å—Ç ‚Äî –Ω–µ –ø—Ä–µ–≥—Ä–∞–¥–∞: —Ç–µ–ª–æ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –≤ –ª—é–±–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ.",
//            "–§–∏–∑–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª—é–¥–∏ —Å—Ç–∞—Ä—à–µ 60 —Ä–µ–∂–µ —Å—Ç—Ä–∞–¥–∞—é—Ç –¥–µ–ø—Ä–µ—Å—Å–∏–µ–π –∏ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å—é.",
//            "–ú–µ–¥–ª–µ–Ω–Ω–æ–µ —Å—Ç–∞—Ä–µ–Ω–∏–µ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –∞ –Ω–µ –≥–µ–Ω–µ—Ç–∏–∫–∏.",
//            "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤ –ø–æ–∂–∏–ª–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ.",
//            "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —É–ª—É—á—à–∞—é—Ç —Ä–∞–±–æ—Ç—É –º–∏—Ç–æ—Ö–æ–Ω–¥—Ä–∏–π ‚Äî –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —ç–Ω–µ—Ä–≥–∏–∏ –≤ –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–µ."
//        )
//
//    }

//    private fun startPhraseRotation(phraseType: String) {
//        phraseRunnable = object : Runnable {
//            override fun run() {
//                phraseTextView.animate()
//                    .alpha(0f)
//                    .translationY(20f)
//                    .setDuration(300)
//                    .withEndAction {
//                        phraseTextView.text = phrases[currentPhraseIndex]
//                        phraseTextView.translationY = 20f
//                        phraseTextView.alpha = 0f
//                        phraseTextView.animate()
//                            .alpha(1f)
//                            .translationY(0f)
//                            .setDuration(500)
//                            .start()
//                    }.start()
//
//                currentPhraseIndex = (currentPhraseIndex + 1) % phrases.size
//                handler.postDelayed(this, 10000)
//            }
//        }
//        handler.post(phraseRunnable)
//    }

    private fun startPhraseRotation(phraseType: String) {
        phrases = when (phraseType) {
            "mass" -> resources.getStringArray(R.array.muscle_gain_phrases)
            "losing" -> resources.getStringArray(R.array.fat_loss_phrases)
            "keeping" -> resources.getStringArray(R.array.maintenance_phrases)
            "longevity" -> resources.getStringArray(R.array.longevity_phrases)
            else -> emptyArray()
        }

        currentPhraseIndex = 0
        phraseRunnable = object : Runnable {
            override fun run() {
                phraseTextView.animate()
                    .alpha(0f)
                    .translationY(20f)
                    .setDuration(300)
                    .withEndAction {
                        phraseTextView.text = phrases[currentPhraseIndex]
                        phraseTextView.translationY = 20f
                        phraseTextView.alpha = 0f
                        phraseTextView.animate()
                            .alpha(1f)
                            .translationY(0f)
                            .setDuration(500)
                            .start()
                    }.start()

                currentPhraseIndex = (currentPhraseIndex + 1) % phrases.size
                handler.postDelayed(this, 10000)
            }
        }
        handler.post(phraseRunnable)
    }

    private fun changeTextOnClick() {
        // –°–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        phraseTextView.animate()
            .alpha(0f)
            .translationY(20f)
            .setDuration(300)
            .withEndAction {
                // –ò–∑–º–µ–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å —Ñ—Ä–∞–∑—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                currentPhraseIndex = (currentPhraseIndex + 1) % phrases.size
                phraseTextView.text = phrases[currentPhraseIndex]
                phraseTextView.translationY = 20f // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
                phraseTextView.alpha = 0f // —Å–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                phraseTextView.animate()
                    .alpha(1f)
                    .translationY(0f)
                    .setDuration(500)
                    .start()
            }
    }


    private fun getLevelInfo(totalXp: Int): LevelInfo {
        val xpTable = generateXpTable(50, 30)
        var accumulatedXp = 0
        var level = 1

        for (i in xpTable.indices) {
            if (totalXp < accumulatedXp + xpTable[i]) {
                val currentXp = totalXp - accumulatedXp
                val maxXp = xpTable[i]
                val title = getRankByLevel(level)
                return LevelInfo(level, currentXp, maxXp, title)
            }
            accumulatedXp += xpTable[i]
            level++
        }
        val title = getRankByLevel(level)
        return LevelInfo(level, totalXp - accumulatedXp, 500, title)
    }

    private fun generateXpTable(startXp: Int, levels: Int): List<Int> {
        val xpList = mutableListOf<Int>()
        for (i in 0 until levels) {
            xpList.add(startXp + i * 10)
        }
        return xpList
    }

    private fun getRankImageResource(rank: String): Int {
        return when (rank) {
            "–ù–æ–≤–∏—á–æ–∫" -> R.drawable.cropped_image_1
            "–õ—é–±–∏—Ç–µ–ª—å" -> R.drawable.cropped_image_2
            "–ê–∫—Ç–∏–≤–∏—Å—Ç" -> R.drawable.cropped_image_3
            "–†–µ–≥—É–ª—è—Ä" -> R.drawable.cropped_image_4
            "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π" -> R.drawable.cropped_image_5
            "–ê—Ç–ª–µ—Ç" -> R.drawable.cropped_image_6
            "–¢—Ä–µ–Ω–µ—Ä" -> R.drawable.cropped_image_7
            "–ú–∞—Å—Ç–µ—Ä" -> R.drawable.cropped_image_8
            "–ì—Ä–∞–Ω–¥–º–∞—Å—Ç–µ—Ä" -> R.drawable.cropped_image_9
            "–ì—É—Ä—É" -> R.drawable.cropped_image_10
            "–õ–µ–≥–µ–Ω–¥–∞" -> R.drawable.cropped_image_11
            "–ß–µ–º–ø–∏–æ–Ω" -> R.drawable.cropped_image_12
            else -> R.drawable.cropped_image_1
        }
    }

    private fun updateXpUI(level: Int, currentXp: Int, maxXp: Int, title: String) {
        levelText.text = "–£—Ä–æ–≤–µ–Ω—å $level"
        rankText.text = "–ó–≤–∞–Ω–∏–µ - $title"
        xpLabel.text = "$currentXp XP / $maxXp XP"
        xpProgress.max = maxXp
        animateXpProgress(currentXp)

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –∑–≤–∞–Ω–∏—é
        rankImageView.setImageResource(getRankImageResource(title))

        if (previousLevel != -1 && level > previousLevel) {
            showLevelUpToast("–í–∞—É! –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: $level")
        }
        previousLevel = level
    }

    private fun animateXpProgress(xp: Int) {
        xpProgress.progress = 0
        xpProgress.animate().setDuration(500).withStartAction {
            xpProgress.progress = xp
        }.start()
    }

//    class DateAxisFormatter(private val dates: List<String>) : ValueFormatter() {
//        private val inputFormat = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
//        private val outputFormat = SimpleDateFormat("d MMM", Locale("ru"))
//
//        override fun getFormattedValue(value: Float): String {
//            val index = value.toInt()
//            return if (index in dates.indices) {
//                val date = inputFormat.parse(dates[index])
//                outputFormat.format(date ?: Date())
//            } else ""
//        }
//    }

    class DateAxisFormatter(private val dates: List<String>) : ValueFormatter() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å—Ç—Ä–æ–∫ –¥–∞—Ç
        private val inputFormat = SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z", Locale.ENGLISH)
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
        private val outputFormat = SimpleDateFormat("d MMM", Locale("ru"))

        override fun getFormattedValue(value: Float): String {
            val index = value.toInt()
            return if (index in dates.indices) {
                try {
                    // –ü–∞—Ä—Å–∏–º –¥–∞—Ç–∞-—Å—Ç—Ä–æ–∫—É —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                    val date = inputFormat.parse(dates[index])
                    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω—ã–π –≤—ã–≤–æ–¥
                    outputFormat.format(date ?: Date())
                } catch (e: ParseException) {
                    e.printStackTrace() // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
                    "" // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                }
            } else ""
        }
    }


    private fun getRankByLevel(level: Int): String {
        return when (level) {
            in 1..4 -> "–ù–æ–≤–∏—á–æ–∫"
            in 5..9 -> "–õ—é–±–∏—Ç–µ–ª—å"
            in 10..14 -> "–ê–∫—Ç–∏–≤–∏—Å—Ç"
            in 15..19 -> "–†–µ–≥—É–ª—è—Ä"
            in 20..24 -> "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
            in 25..29 -> "–ê—Ç–ª–µ—Ç"
            in 30..34 -> "–¢—Ä–µ–Ω–µ—Ä"
            in 35..39 -> "–ú–∞—Å—Ç–µ—Ä"
            in 40..44 -> "–ì—Ä–∞–Ω–¥–º–∞—Å—Ç–µ—Ä"
            in 45..49 -> "–ì—É—Ä—É"
            in 50..54 -> "–õ–µ–≥–µ–Ω–¥–∞"
            else -> "–ß–µ–º–ø–∏–æ–Ω"
        }
    }


    private fun showLevelUpToast(message: String) {
        val inflater = layoutInflater
        val layout = inflater.inflate(R.layout.layout_new_level_toast, null)
        val toastText = layout.findViewById<TextView>(R.id.toastText)
        toastText.text = message

        val icon = layout.findViewById<ImageView>(R.id.toastIcon)
        icon.setImageResource(R.drawable.ic_star_celebration)

        val toast = Toast(requireContext().applicationContext)
        toast.view = layout
        toast.duration = Toast.LENGTH_SHORT
        toast.setGravity(Gravity.TOP or Gravity.CENTER_HORIZONTAL, 0, 120)
        toast.show()

        MediaPlayer.create(requireContext(), R.raw.level_up_ding_2).start()
    }

    private fun setupProgressChart() {
        // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–≤ –±—É–¥—É—â–µ–º —Ç—ã –ø–æ–ª—É—á–∏—à—å –∏—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞)
        val weightHistory = listOf(
            WeightEntry("2025-05-01", 78f),
            WeightEntry("2025-05-03", 75.4f),
            WeightEntry("2025-05-05", 74.8f),
            WeightEntry("2025-05-07", 74.2f),
            WeightEntry("2025-05-09", 73.9f),
            WeightEntry("2025-05-11", 73.2f),
            WeightEntry("2025-05-13", 72.8f),
            WeightEntry("2025-05-14", 76.4f),
            WeightEntry("2025-05-18", 75.3f),
            WeightEntry("2025-05-19", 74.3f),
            WeightEntry("2025-05-20", 73.3f),
            WeightEntry("2025-05-21", 72.3f),
            WeightEntry("2025-05-22", 71.3f),
            WeightEntry("2025-05-23", 72.5f),
            WeightEntry("2025-05-24", 71.0f),

            WeightEntry("2025-05-25", 72.0f),
            WeightEntry("2025-05-26", 73.0f),
            WeightEntry("2025-05-27", 74.0f),
            WeightEntry("2025-05-28", 75.0f),
            WeightEntry("2025-05-29", 76.0f),
            WeightEntry("2025-05-30", 74.0f),
            WeightEntry("2025-05-31", 75.0f),
            WeightEntry("2025-06-01", 73.0f),
            WeightEntry("2025-05-02", 72.0f),
            WeightEntry("2025-05-03", 71.0f),
            WeightEntry("2025-05-04", 72.0f),
            WeightEntry("2025-05-05", 71.0f),

            WeightEntry("2025-05-25", 72.0f),
            WeightEntry("2025-05-26", 73.0f),
            WeightEntry("2025-05-27", 74.0f),
            WeightEntry("2025-05-28", 75.0f),
            WeightEntry("2025-05-29", 76.0f),
            WeightEntry("2025-05-30", 74.0f),
            WeightEntry("2025-05-31", 75.0f),
            WeightEntry("2025-06-01", 73.0f),
            WeightEntry("2025-05-02", 72.0f),
            WeightEntry("2025-05-03", 71.0f),
            WeightEntry("2025-05-04", 72.0f),
            WeightEntry("2025-05-05", 71.0f),


        )

        val entries = weightHistory.mapIndexed { index, entry ->
            Entry(index.toFloat(), entry.weight)
        }

        val dataSet = LineDataSet(entries, "–í–µ—Å (–∫–≥)").apply {
            color = resources.getColor(R.color.teal_700, null)
            valueTextColor = resources.getColor(R.color.black, null)
            lineWidth = 2.5f
            circleRadius = 4f
            setDrawFilled(true)
            fillAlpha = 100
            fillColor = resources.getColor(R.color.teal_200, null)
            mode = LineDataSet.Mode.CUBIC_BEZIER
        }

        dataSet.setDrawValues(false) // –æ—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
        progressChart.data = LineData(dataSet)

        progressChart.apply {
            description.isEnabled = false
            axisRight.isEnabled = false

            xAxis.position = XAxis.XAxisPosition.BOTTOM
            xAxis.setDrawGridLines(false)
            xAxis.labelRotationAngle = -30f
            xAxis.granularity = 1f
            xAxis.valueFormatter = DateAxisFormatter(weightHistory.map { it.date })

            axisLeft.setDrawGridLines(true)
            axisLeft.setPosition(YAxis.YAxisLabelPosition.OUTSIDE_CHART)

            legend.isEnabled = false
            setTouchEnabled(false)
            invalidate()
        }

        val startWeight = weightHistory.first().weight
        val currentWeight = weightHistory.last().weight
        val goalWeight = 70f

        weightText.text = "–¢–µ–∫—É—â–∏–π –≤–µ—Å: ${currentWeight.toInt()} –∫–≥"
        goalWeightText.text = "–¶–µ–ª—å: ${goalWeight.toInt()} –∫–≥"

        val delta = goalWeight - startWeight
        val progressDelta = currentWeight - startWeight
        val progressPercent = if (delta != 0f) (progressDelta / delta * 100).coerceIn(0f, 100f) else 0f
        val remaining = kotlin.math.abs(currentWeight - goalWeight)

//        progressPercentText.text = "–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progressPercent.toInt()} —Ö–∞—Ö–∞—Ö–∞—Ö–∞%"
        weightLeftText.text = "–û—Å—Ç–∞–ª–æ—Å—å: ${"%.1f".format(remaining)} –∫–≥"
    }

    data class LevelInfo(
        val level: Int,
        val currentXp: Int,
        val maxXp: Int,
        val title: String
    )

    data class WeightEntry(
        val date: String,  // —Ñ–æ—Ä–º–∞—Ç: "2025-05-01"
        val weight: Float
    )
}
